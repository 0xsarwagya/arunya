/**
 * The main entry point for interacting with the database.
 *
 * This exports a singleton instance of the Prisma Client, which is a
 * lightweight ORM for interacting with the database. The Prisma Client
 * is automatically generated based on the shape of the database, and
 * provides type-safe access to the tables and columns in the database.
 *
 * The Prisma Client is a singleton, meaning that there is only one instance
 * of it that is shared across the entire application. This is useful for
 * a number of reasons:
 *
 * 1. It ensures that there is only one connection to the database at a
 *    time, which can help prevent connection fatigue.
 * 2. It allows for easy sharing of the Prisma Client instance between
 *    different parts of the application.
 *
 * The Prisma Client instance is memoized, meaning that it is only created
 * once and then reused on subsequent calls. This helps to improve
 * performance by avoiding the overhead of creating a new instance of
 * the Prisma Client on each request.
 *
 * @remarks
 *
 * The Prisma Client instance is created using the `PrismaClient` constructor
 * from the `@prisma/client` module. The constructor takes no arguments, and
 * returns a new instance of the Prisma Client.
 *
 * The Prisma Client instance is typed as `PrismaClient`, which is a type
 * that is automatically generated by Prisma based on the shape of the
 * database. The type includes all of the tables and columns in the
 * database, as well as the relationships between them.
 *
 * The Prisma Client instance provides a number of methods for interacting
 * with the database, including `findUnique`, `findFirst`, `findMany`,
 * `create`, `update`, and `delete`. These methods are all typed, meaning
 * that they will return the correct type of data based on the table and
 * columns that are being queried.
 *
 * @example
 *
 * import { prisma } from '@/lib/db'
 *
 * const user = await prisma.user.findUnique({
 *   where: {
 *     id: 1,
 *   },
 * })
 */
import { PrismaClient } from "@/lib/generated/prisma"

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }

export const prisma = globalForPrisma.prisma || new PrismaClient()

if (process.env.NODE_ENV !== "production") { globalForPrisma.prisma = prisma }